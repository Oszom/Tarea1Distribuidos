// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: logistica.proto

package logistica

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrdenCliente struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Producto    string `protobuf:"bytes,2,opt,name=producto,proto3" json:"producto,omitempty"`
	Valor       int64  `protobuf:"varint,3,opt,name=valor,proto3" json:"valor,omitempty"`
	Tienda      string `protobuf:"bytes,4,opt,name=tienda,proto3" json:"tienda,omitempty"`
	Destino     string `protobuf:"bytes,5,opt,name=destino,proto3" json:"destino,omitempty"`
	Prioritario int64  `protobuf:"varint,6,opt,name=prioritario,proto3" json:"prioritario,omitempty"` //-1 -> Retail __ 0 -> Normal  __ 1 -> Prioritario
}

func (x *OrdenCliente) Reset() {
	*x = OrdenCliente{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logistica_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdenCliente) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdenCliente) ProtoMessage() {}

func (x *OrdenCliente) ProtoReflect() protoreflect.Message {
	mi := &file_logistica_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdenCliente.ProtoReflect.Descriptor instead.
func (*OrdenCliente) Descriptor() ([]byte, []int) {
	return file_logistica_proto_rawDescGZIP(), []int{0}
}

func (x *OrdenCliente) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OrdenCliente) GetProducto() string {
	if x != nil {
		return x.Producto
	}
	return ""
}

func (x *OrdenCliente) GetValor() int64 {
	if x != nil {
		return x.Valor
	}
	return 0
}

func (x *OrdenCliente) GetTienda() string {
	if x != nil {
		return x.Tienda
	}
	return ""
}

func (x *OrdenCliente) GetDestino() string {
	if x != nil {
		return x.Destino
	}
	return ""
}

func (x *OrdenCliente) GetPrioritario() int64 {
	if x != nil {
		return x.Prioritario
	}
	return 0
}

type SeguimientoCliente struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seguimiento int64  `protobuf:"varint,1,opt,name=seguimiento,proto3" json:"seguimiento,omitempty"`
	Estado      string `protobuf:"bytes,2,opt,name=estado,proto3" json:"estado,omitempty"`
	Producto    string `protobuf:"bytes,3,opt,name=producto,proto3" json:"producto,omitempty"`
}

func (x *SeguimientoCliente) Reset() {
	*x = SeguimientoCliente{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logistica_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeguimientoCliente) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeguimientoCliente) ProtoMessage() {}

func (x *SeguimientoCliente) ProtoReflect() protoreflect.Message {
	mi := &file_logistica_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeguimientoCliente.ProtoReflect.Descriptor instead.
func (*SeguimientoCliente) Descriptor() ([]byte, []int) {
	return file_logistica_proto_rawDescGZIP(), []int{1}
}

func (x *SeguimientoCliente) GetSeguimiento() int64 {
	if x != nil {
		return x.Seguimiento
	}
	return 0
}

func (x *SeguimientoCliente) GetEstado() string {
	if x != nil {
		return x.Estado
	}
	return ""
}

func (x *SeguimientoCliente) GetProducto() string {
	if x != nil {
		return x.Producto
	}
	return ""
}

type InformeCamion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdPaquete int64  `protobuf:"varint,1,opt,name=idPaquete,proto3" json:"idPaquete,omitempty"`
	Estado    string `protobuf:"bytes,2,opt,name=estado,proto3" json:"estado,omitempty"`
}

func (x *InformeCamion) Reset() {
	*x = InformeCamion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logistica_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InformeCamion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InformeCamion) ProtoMessage() {}

func (x *InformeCamion) ProtoReflect() protoreflect.Message {
	mi := &file_logistica_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InformeCamion.ProtoReflect.Descriptor instead.
func (*InformeCamion) Descriptor() ([]byte, []int) {
	return file_logistica_proto_rawDescGZIP(), []int{2}
}

func (x *InformeCamion) GetIdPaquete() int64 {
	if x != nil {
		return x.IdPaquete
	}
	return 0
}

func (x *InformeCamion) GetEstado() string {
	if x != nil {
		return x.Estado
	}
	return ""
}

var File_logistica_proto protoreflect.FileDescriptor

var file_logistica_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x22, 0xa4, 0x01, 0x0a,
	0x0c, 0x4f, 0x72, 0x64, 0x65, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x6f, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x69, 0x65, 0x6e, 0x64, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x69, 0x65, 0x6e, 0x64, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x61, 0x72, 0x69, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x61,
	0x72, 0x69, 0x6f, 0x22, 0x6a, 0x0a, 0x12, 0x53, 0x65, 0x67, 0x75, 0x69, 0x6d, 0x69, 0x65, 0x6e,
	0x74, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x67,
	0x75, 0x69, 0x6d, 0x69, 0x65, 0x6e, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x73, 0x65, 0x67, 0x75, 0x69, 0x6d, 0x69, 0x65, 0x6e, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x73, 0x74, 0x61, 0x64, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x73, 0x74,
	0x61, 0x64, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x6f, 0x22,
	0x45, 0x0a, 0x0d, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x43, 0x61, 0x6d, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x64, 0x50, 0x61, 0x71, 0x75, 0x65, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x64, 0x50, 0x61, 0x71, 0x75, 0x65, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x73, 0x74, 0x61, 0x64, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x73, 0x74, 0x61, 0x64, 0x6f, 0x32, 0xcd, 0x02, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x6e,
	0x75, 0x65, 0x76, 0x61, 0x4f, 0x72, 0x64, 0x65, 0x6e, 0x12, 0x17, 0x2e, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x65, 0x1a, 0x1d, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x53,
	0x65, 0x67, 0x75, 0x69, 0x6d, 0x69, 0x65, 0x6e, 0x74, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x13, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x72, 0x53,
	0x65, 0x67, 0x75, 0x69, 0x6d, 0x69, 0x65, 0x6e, 0x74, 0x6f, 0x12, 0x1d, 0x2e, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x53, 0x65, 0x67, 0x75, 0x69, 0x6d, 0x69, 0x65, 0x6e,
	0x74, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x1a, 0x1d, 0x2e, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x53, 0x65, 0x67, 0x75, 0x69, 0x6d, 0x69, 0x65, 0x6e, 0x74,
	0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x19, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x72, 0x53, 0x65, 0x67, 0x75, 0x69, 0x6d, 0x69, 0x65, 0x6e, 0x74,
	0x6f, 0x43, 0x61, 0x6d, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x43, 0x61, 0x6d, 0x69, 0x6f,
	0x6e, 0x1a, 0x18, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x43, 0x61, 0x6d, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x47, 0x0a,
	0x0f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x65, 0x67, 0x61,
	0x12, 0x18, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x43, 0x61, 0x6d, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x43, 0x61,
	0x6d, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_logistica_proto_rawDescOnce sync.Once
	file_logistica_proto_rawDescData = file_logistica_proto_rawDesc
)

func file_logistica_proto_rawDescGZIP() []byte {
	file_logistica_proto_rawDescOnce.Do(func() {
		file_logistica_proto_rawDescData = protoimpl.X.CompressGZIP(file_logistica_proto_rawDescData)
	})
	return file_logistica_proto_rawDescData
}

var file_logistica_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_logistica_proto_goTypes = []interface{}{
	(*OrdenCliente)(nil),       // 0: logistica.OrdenCliente
	(*SeguimientoCliente)(nil), // 1: logistica.SeguimientoCliente
	(*InformeCamion)(nil),      // 2: logistica.informeCamion
}
var file_logistica_proto_depIdxs = []int32{
	0, // 0: logistica.LogisticaService.nuevaOrden:input_type -> logistica.OrdenCliente
	1, // 1: logistica.LogisticaService.informarSeguimiento:input_type -> logistica.SeguimientoCliente
	2, // 2: logistica.LogisticaService.informarSeguimientoCamion:input_type -> logistica.informeCamion
	2, // 3: logistica.LogisticaService.informarEntrega:input_type -> logistica.informeCamion
	1, // 4: logistica.LogisticaService.nuevaOrden:output_type -> logistica.SeguimientoCliente
	1, // 5: logistica.LogisticaService.informarSeguimiento:output_type -> logistica.SeguimientoCliente
	2, // 6: logistica.LogisticaService.informarSeguimientoCamion:output_type -> logistica.informeCamion
	2, // 7: logistica.LogisticaService.informarEntrega:output_type -> logistica.informeCamion
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_logistica_proto_init() }
func file_logistica_proto_init() {
	if File_logistica_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_logistica_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdenCliente); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logistica_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeguimientoCliente); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logistica_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InformeCamion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_logistica_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_logistica_proto_goTypes,
		DependencyIndexes: file_logistica_proto_depIdxs,
		MessageInfos:      file_logistica_proto_msgTypes,
	}.Build()
	File_logistica_proto = out.File
	file_logistica_proto_rawDesc = nil
	file_logistica_proto_goTypes = nil
	file_logistica_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LogisticaServiceClient is the client API for LogisticaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogisticaServiceClient interface {
	//······················Funciones para el Cliente······················
	NuevaOrden(ctx context.Context, in *OrdenCliente, opts ...grpc.CallOption) (*SeguimientoCliente, error)
	InformarSeguimiento(ctx context.Context, in *SeguimientoCliente, opts ...grpc.CallOption) (*SeguimientoCliente, error)
	//······································································
	//······················Funciones para el Camion························
	InformarSeguimientoCamion(ctx context.Context, in *InformeCamion, opts ...grpc.CallOption) (*InformeCamion, error)
	InformarEntrega(ctx context.Context, in *InformeCamion, opts ...grpc.CallOption) (*InformeCamion, error)
}

type logisticaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogisticaServiceClient(cc grpc.ClientConnInterface) LogisticaServiceClient {
	return &logisticaServiceClient{cc}
}

func (c *logisticaServiceClient) NuevaOrden(ctx context.Context, in *OrdenCliente, opts ...grpc.CallOption) (*SeguimientoCliente, error) {
	out := new(SeguimientoCliente)
	err := c.cc.Invoke(ctx, "/logistica.LogisticaService/nuevaOrden", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticaServiceClient) InformarSeguimiento(ctx context.Context, in *SeguimientoCliente, opts ...grpc.CallOption) (*SeguimientoCliente, error) {
	out := new(SeguimientoCliente)
	err := c.cc.Invoke(ctx, "/logistica.LogisticaService/informarSeguimiento", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticaServiceClient) InformarSeguimientoCamion(ctx context.Context, in *InformeCamion, opts ...grpc.CallOption) (*InformeCamion, error) {
	out := new(InformeCamion)
	err := c.cc.Invoke(ctx, "/logistica.LogisticaService/informarSeguimientoCamion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticaServiceClient) InformarEntrega(ctx context.Context, in *InformeCamion, opts ...grpc.CallOption) (*InformeCamion, error) {
	out := new(InformeCamion)
	err := c.cc.Invoke(ctx, "/logistica.LogisticaService/informarEntrega", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogisticaServiceServer is the server API for LogisticaService service.
type LogisticaServiceServer interface {
	//······················Funciones para el Cliente······················
	NuevaOrden(context.Context, *OrdenCliente) (*SeguimientoCliente, error)
	InformarSeguimiento(context.Context, *SeguimientoCliente) (*SeguimientoCliente, error)
	//······································································
	//······················Funciones para el Camion························
	InformarSeguimientoCamion(context.Context, *InformeCamion) (*InformeCamion, error)
	InformarEntrega(context.Context, *InformeCamion) (*InformeCamion, error)
}

// UnimplementedLogisticaServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLogisticaServiceServer struct {
}

func (*UnimplementedLogisticaServiceServer) NuevaOrden(context.Context, *OrdenCliente) (*SeguimientoCliente, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NuevaOrden not implemented")
}
func (*UnimplementedLogisticaServiceServer) InformarSeguimiento(context.Context, *SeguimientoCliente) (*SeguimientoCliente, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformarSeguimiento not implemented")
}
func (*UnimplementedLogisticaServiceServer) InformarSeguimientoCamion(context.Context, *InformeCamion) (*InformeCamion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformarSeguimientoCamion not implemented")
}
func (*UnimplementedLogisticaServiceServer) InformarEntrega(context.Context, *InformeCamion) (*InformeCamion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformarEntrega not implemented")
}

func RegisterLogisticaServiceServer(s *grpc.Server, srv LogisticaServiceServer) {
	s.RegisterService(&_LogisticaService_serviceDesc, srv)
}

func _LogisticaService_NuevaOrden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdenCliente)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticaServiceServer).NuevaOrden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistica.LogisticaService/NuevaOrden",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticaServiceServer).NuevaOrden(ctx, req.(*OrdenCliente))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticaService_InformarSeguimiento_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeguimientoCliente)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticaServiceServer).InformarSeguimiento(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistica.LogisticaService/InformarSeguimiento",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticaServiceServer).InformarSeguimiento(ctx, req.(*SeguimientoCliente))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticaService_InformarSeguimientoCamion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InformeCamion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticaServiceServer).InformarSeguimientoCamion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistica.LogisticaService/InformarSeguimientoCamion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticaServiceServer).InformarSeguimientoCamion(ctx, req.(*InformeCamion))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticaService_InformarEntrega_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InformeCamion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticaServiceServer).InformarEntrega(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistica.LogisticaService/InformarEntrega",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticaServiceServer).InformarEntrega(ctx, req.(*InformeCamion))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogisticaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logistica.LogisticaService",
	HandlerType: (*LogisticaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "nuevaOrden",
			Handler:    _LogisticaService_NuevaOrden_Handler,
		},
		{
			MethodName: "informarSeguimiento",
			Handler:    _LogisticaService_InformarSeguimiento_Handler,
		},
		{
			MethodName: "informarSeguimientoCamion",
			Handler:    _LogisticaService_InformarSeguimientoCamion_Handler,
		},
		{
			MethodName: "informarEntrega",
			Handler:    _LogisticaService_InformarEntrega_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logistica.proto",
}
