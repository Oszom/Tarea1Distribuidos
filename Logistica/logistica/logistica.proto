syntax = "proto3";
package logistica;
option go_package = "Logistica/logistica";

//*****************Comunicacion-Logistica-Cliente*****************

message OrdenCliente{
    string id = 1;
    string producto = 2;
    int64 valor = 3;
    string tienda = 4;
    string destino = 5;
    int64 prioritario = 6;
    //-1 -> Retail __ 0 -> Normal  __ 1 -> Prioritario
}

message SeguimientoCliente{
    int64 seguimiento = 1;
    string estado = 2;
    string producto = 3;
}

message informeCamion {
    string idPaquete = 1;
    string estado = 2;
    int64 intentos = 3;
}

message paqueteRegistro {
	string idPaquete = 1;
    int64 seguimiento = 2;
    string tipo = 3;
    int64 valor = 4;
    int64 intentos = 5;
    string estado = 6;
    string origen = 7;
    string destino = 8;
}

message asignacionCamion{
    string tipo = 1;
    string lastPaqueteEnviado = 2;
}

service LogisticaService {
    //······················Funciones para el Cliente······················
    rpc nuevaOrden(OrdenCliente) returns (SeguimientoCliente) {}
    rpc informarSeguimiento(SeguimientoCliente) returns (SeguimientoCliente) {}
    //······································································
    //······················Funciones para el Camion························
    rpc informarEntrega(informeCamion) returns (informeCamion){} //Aviso de entrega completada.
    rpc asignarPaquete(asignacionCamion) returns (paqueteRegistro) {} //El camion va a bodega a buscar paquetes.
    //······································································
}

//*****************Comunicacion-Logistica-Finanzas*****************